#!/usr/bin/env tsx
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { writeFileSync } from 'fs';
import { uniq } from '../src/utils/utils.js';
function stringifyArray(input) {
    return JSON.stringify(uniq(input), null, 2)
        // Prevent linting errors
        .replace(/"/g, '\'')
        .replace(/'\n/, '\',\n');
}
function stringifySimpleRecord(input) {
    let output = '{\n';
    output += Object.entries(input).map(([key, value]) => '  ' + key + ': ' + '\'' + value + '\',\n').join('');
    output += '}';
    return output;
}
doit();
function doit() {
    return __awaiter(this, void 0, void 0, function* () {
        var _a, _b, _c;
        const response = yield fetch('https://www.wikidata.org/w/api.php?action=paraminfo&modules=wbgetentities&format=json');
        const data = yield response.json();
        const parameters = data.paraminfo.modules[0].parameters;
        const sites = (_a = parameters.find(o => o.name === 'sites')) === null || _a === void 0 ? void 0 : _a.type;
        const languages = (_b = parameters.find(o => o.name === 'languages')) === null || _b === void 0 ? void 0 : _b.type;
        if (!sites || !languages)
            throw new Error('paraminfo format changed');
        const specialSites = {};
        for (const site of sites) {
            const project = (_c = site.match(/^(.+)wiki$/)) === null || _c === void 0 ? void 0 : _c[1];
            if (!project)
                continue;
            if (!languages.includes(project.replace(/_/g, '-'))) {
                specialSites[site] = project;
            }
        }
        const output = [
            "// Generated by 'npm run update-wikimedia-constants'",
            [
                'export type Site = typeof sites[number]',
                'export type WikimediaLanguageCode = typeof wikimediaLanguageCodes[number]',
            ].join('\n'),
            'export const specialSites = ' + stringifySimpleRecord(specialSites) + ' as const',
            'export const sites = ' + stringifyArray(sites) + ' as const',
            'export const wikimediaLanguageCodes = ' + stringifyArray(languages) + ' as const',
        ].join('\n\n') + '\n';
        writeFileSync('./src/helpers/wikimedia_constants.ts', output, 'utf-8');
    });
}
//# sourceMappingURL=update_wikimedia_constants.js.map