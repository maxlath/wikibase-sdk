#!/usr/bin/env tsx
import { writeFileSync } from 'fs'
import { uniq } from '../src/utils/utils.js'

interface Parameter {
  name: string
  type: string[]
}

function stringifyArray (input: string[]) {
  return JSON.stringify(uniq(input), null, 2)
    // Prevent linting errors
    .replace(/"/g, '\'')
    .replace(/'\n/, '\',\n')
}

function stringifySimpleRecord (input: Record<string, string>) {
  let output = '{\n'
  output += Object.entries(input).map(([ key, value ]) => '  ' + key + ': ' + '\'' + value + '\',\n').join('')
  output += '}'
  return output
}

doit()
async function doit () {
  const response = await fetch('https://www.wikidata.org/w/api.php?action=paraminfo&modules=wbgetentities&format=json')
  const data = await response.json()

  const parameters = data.paraminfo.modules[0].parameters as Parameter[]

  const sites = parameters.find(o => o.name === 'sites')?.type
  const languages = parameters.find(o => o.name === 'languages')?.type
  if (!sites || !languages) throw new Error('paraminfo format changed')

  const specialSites: Record<string, string> = {}
  for (const site of sites) {
    const project = site.match(/^(.+)wiki$/)?.[1]
    if (!project) continue
    if (!languages.includes(project.replace(/_/g, '-'))) {
      specialSites[site] = project
    }
  }

  const output = `// Generated by 'npm run update-wikimedia-constants'

export type Site = typeof sites[number]
export type WikimediaLanguageCode = typeof wikimediaLanguageCodes[number]

export const specialSites = ${stringifySimpleRecord(specialSites)} as const

export const sites = ${stringifyArray(sites)} as const

/**
 * Wikimedia Languages Codes as defined in https://gerrit.wikimedia.org/g/mediawiki/core/+/master/includes/languages/data/Names.php
 * See also https://www.wikidata.org/wiki/Q21468732 and https://www.wikidata.org/wiki/Property:P424
 */
export const wikimediaLanguageCodes = ${stringifyArray(languages)} as const
`

  writeFileSync('./src/helpers/wikimedia_constants.ts', output, 'utf-8')
}
